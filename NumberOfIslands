public class Solution {
    public int NumIslands(char[][] grid) {
        
        //BFS
        var gr = grid.Length;
        var gc = grid[0].Length;
        var q = new Queue<int>();
        var numOfIslands = 0;
        for(var i = 0 ; i < gr ; i++)
            for(var j = 0 ; j < gc ; j++)
            {
                if(grid[i][j] == '1')
                {
                    numOfIslands++;
                    grid[i][j] = '0';
                    q.Enqueue(i*gc+j);//in which format i must insert the location
                    while(q.Count != 0){
                        var blah = q.Dequeue();
                        var r = blah/gc;
                        var c = blah%gc;
                        if(r+1 < gr && grid[r+1][c] == '1'){
                            q.Enqueue((r+1)*gc+c);
                            grid[r+1][c] = '0';
                        }
                        if(r-1 >= 0 && grid[r-1][c] == '1'){
                            q.Enqueue((r-1)*gc+c);
                            grid[r-1][c] = '0';
                        }
                        if(c+1 < gc && grid[r][c+1] == '1')
                        {
                            q.Enqueue(r*gc+(c+1));
                            grid[r][c+1] = '0';
                        }
                        if(c-1 >= 0 && grid[r][c-1] == '1')
                        {
                            q.Enqueue(r*gc+(c-1));
                            grid[r][c-1] = '0';
                        }
                        
                    }
                }
            }
        return numOfIslands;
    }
}
