public class Solution {
    
    public void DFS(char[][] grid, int r, int c){
        
        var gr = grid.Length;
        var gc = grid[0].Length;
        if(r <0 || c < 0 || r>= gr || c>= gc || grid[r][c] == '0')
            return;
        grid[r][c] = '0';
        DFS(grid, r+1, c);
        DFS(grid, r-1, c);
        DFS(grid, r, c+1);
        DFS(grid, r, c-1);
    }
    public int NumIslands(char[][] grid) {
        //DFS
        if(grid == null || grid.Length ==0)
            return 0;
        var gr = grid.Length;
        var gc = grid[0].Length;
        var numOfIslands = 0;    
        for(var i = 0 ; i < gr ; i++)
            for(var j = 0 ; j < gc ; j++)
            {
                if(grid[i][j] == '1'){
                    numOfIslands++;
                    //we want this to be starting point for DFS 
                    DFS(grid, i , j);
                }    
            }
        return numOfIslands;
    }
}
