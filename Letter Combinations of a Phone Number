public class Solution {
    public Dictionary<char, List<char>> NumToChar = new Dictionary <char, List<char>>{
        {'2',new List<char>{'a','b','c'}},
        {'3',new List<char>{'d','e','f'}},
        {'4',new List<char>{'g','h','i'}},
        {'5',new List<char>{'j','k','l'}},
        {'6',new List<char>{'m','n','o'}},
        {'7',new List<char>{'p','q','r','s'}},
        {'8',new List<char>{'t','u','v'}},
        {'9',new List<char>{'w','x','y','z'}},
    };
    public IList<string> LetterCombinations(string digits) {
        
        var result = new List<string>();
        if(String.IsNullOrEmpty(digits)) return result;
        var digitsSeparated = digits.ToCharArray();
        if(digits.Length == 1) return NumToChar[digitsSeparated[0]].Select(s=>s.ToString()).ToList();
        
        var root = NumToChar[digitsSeparated[0]];
        var resultList = LetterCombinations(digits.Substring(1));
        for(var i=0 ; i < root.Count ; i++)
        {
            result.AddRange(resultList.Select(s=>(root[i])+s).ToList());
        }
        return result;
    }
}
