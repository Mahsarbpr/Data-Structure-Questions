/*Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
An input string is valid if:
Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Note that an empty string is also considered valid.

Example 1:
Input: "()"
Output: true

Example 2:
Input: "()[]{}"
Output: true

Example 3:
Input: "(]"
Output: false

Example 4:
Input: "([)]"
Output: false

Example 5:
Input: "{[]}"
Output: true
*/


public class Solution {
    public bool IsValid(string s) {
        
       var paranthesisDict = new Dictionary<char,char>(){
           {')','('},
           {'}','{'},
           {']','['}
       };
       var mystack = new Stack<char>();
       var sCharArray = s.ToCharArray();
       char top='\0';
    
       char c;
       for(int i=0;i<sCharArray.Count();i++){
            c= sCharArray[i];
            if(paranthesisDict.ContainsValue(c)){
                mystack.Push(c);
            }
            else if(paranthesisDict.ContainsKey(c)){
                top=mystack.Count()!=0?mystack.Pop():'\0';
                if(paranthesisDict[c]!=top)
                    return false;
            }
       }
        if(mystack.Count()==0)
            return true;
        return false;
    }
}
